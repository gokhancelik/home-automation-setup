apiVersion: apps/v1
kind: Deployment
metadata:
  name: home-assistant
  namespace: home-automation
  labels:
    app.kubernetes.io/name: home-assistant
    app.kubernetes.io/instance: home-assistant
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: home-assistant
      app.kubernetes.io/instance: home-assistant
  template:
    metadata:
      labels:
        app.kubernetes.io/name: home-assistant
        app.kubernetes.io/instance: home-assistant
    spec:
      initContainers:
      - name: install-hacs
        image: alpine:3.18
        command:
        - /bin/sh
        - -c
        - |
          # Check if HACS is already installed
          if [ ! -f "/config/custom_components/hacs/manifest.json" ]; then
            echo "HACS not found, installing..."
            
            # Install required packages
            apk add --no-cache wget unzip
            
            # Create custom_components directory if it doesn't exist
            mkdir -p /config/custom_components
            
            # Remove any existing hacs directory
            rm -rf /config/custom_components/hacs
            
            # Download latest HACS release
            cd /tmp
            wget -q https://github.com/hacs/integration/releases/latest/download/hacs.zip
            unzip -q hacs.zip
            
            # Move HACS files to correct location
            mkdir -p /config/custom_components/hacs
            mv *.py *.json hacs_frontend repositories translations utils validate websocket /config/custom_components/hacs/ 2>/dev/null || true
            
            # Clean up
            rm -f hacs.zip
            
            echo "HACS installed successfully"
          else
            echo "HACS already installed, skipping"
          fi
        volumeMounts:
        - name: data
          mountPath: /config
      - name: setup-secrets
        image: busybox:1.36
        command:
        - /bin/sh
        - -c
        - |
          cat > /config/secrets.yaml << EOF
          latitude: $LATITUDE
          longitude: $LONGITUDE
          timezone: $TIMEZONE
          api_password: $API_PASSWORD
          influxdb_token: $INFLUXDB_TOKEN
          EOF
          
          # Create empty automation files if they don't exist
          touch /config/automations.yaml
          touch /config/scripts.yaml
          touch /config/scenes.yaml
          
          # Create directories for HACS and themes
          mkdir -p /config/themes
          mkdir -p /config/www
          mkdir -p /config/custom_components
        env:
        - name: LATITUDE
          valueFrom:
            secretKeyRef:
              name: home-assistant-config
              key: latitude
        - name: LONGITUDE
          valueFrom:
            secretKeyRef:
              name: home-assistant-config
              key: longitude
        - name: TIMEZONE
          valueFrom:
            secretKeyRef:
              name: home-assistant-config
              key: timezone
        - name: API_PASSWORD
          valueFrom:
            secretKeyRef:
              name: home-assistant-config
              key: api-password
        - name: INFLUXDB_TOKEN
          valueFrom:
            secretKeyRef:
              name: home-assistant-config
              key: influxdb-token
        volumeMounts:
        - name: data
          mountPath: /config
      containers:
      - name: home-assistant
        image: "homeassistant/home-assistant:2025.8.3"
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8123
          name: http
          protocol: TCP
        - containerPort: 21063
          name: homekit
          protocol: TCP
        env:
        - name: TZ
          value: "Europe/Amsterdam"
        securityContext:
          privileged: true
        volumeMounts:
        - name: data
          mountPath: /config
        - name: configuration
          mountPath: /config/configuration.yaml
          subPath: configuration.yaml
          readOnly: true
        - name: usb-devices
          mountPath: /dev/ttyUSB0
        resources:
          requests:
            cpu: 200m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 2Gi
      - name: matter-server
        image: ghcr.io/home-assistant-libs/python-matter-server:stable
        ports:
        - containerPort: 5580
          name: matter-ws
          protocol: TCP
        env:
        - name: PYTHONUNBUFFERED
          value: "1"
        volumeMounts:
        - name: data
          mountPath: /data
          subPath: matter-server
        command:
        - python
        - -m
        - matter_server.server
        - --storage-path
        - /data
        - --port
        - "5580"
        - --log-level
        - info
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: home-assistant-data
      - name: configuration
        configMap:
          name: home-assistant-config
      - name: usb-devices
        hostPath:
          path: /dev/ttyUSB0
          type: CharDevice
