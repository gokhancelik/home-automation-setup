@page "/"
@using SmartCloud.Core.Interfaces
@using SmartCloud.Core.Models
@inject IDataStorageService StorageService
@inject IPredictiveAnalyticsService AnalyticsService

<h1>Smart Cloud - Industrial IoT Dashboard</h1>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12">
            <h1 class="display-4">Industrial IoT Dashboard</h1>
            <p class="lead">Real-time monitoring and predictive maintenance for your factory</p>
        </div>
    </div>

    <!-- Status Cards -->
    <div class="row mb-4">
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-primary shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                                Active Machines</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">@activeMachines</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-cogs fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-success shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">
                                Overall Efficiency</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">@($"{overallEfficiency:F1}%")</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-chart-line fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-warning shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">
                                Active Alarms</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">@activeAlarms</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-exclamation-triangle fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-info shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-info text-uppercase mb-1">
                                Data Points Today</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">@dataPointsToday</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-database fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Recent Data and Predictions -->
    <div class="row">
        <div class="col-xl-6">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Recent PLC Data</h6>
                </div>
                <div class="card-body">
                    @if (recentPlcData.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>Device</th>
                                        <th>Temperature</th>
                                        <th>Pressure</th>
                                        <th>Status</th>
                                        <th>Time</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var data in recentPlcData.Take(10))
                                    {
                                        <tr>
                                            <td>@data.DeviceId</td>
                                            <td>@($"{data.Temperature:F1}Â°C")</td>
                                            <td>@($"{data.Pressure:F1} bar")</td>
                                            <td>
                                                <span class="badge @GetStatusBadgeClass(data.Status)">
                                                    @data.Status
                                                </span>
                                            </td>
                                            <td>@data.Timestamp.ToString("HH:mm:ss")</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <p class="text-muted">No recent data available</p>
                    }
                </div>
            </div>
        </div>

        <div class="col-xl-6">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Maintenance Predictions</h6>
                </div>
                <div class="card-body">
                    @if (maintenancePredictions.Any())
                    {
                        @foreach (var prediction in maintenancePredictions)
                        {
                            <div class="card mb-2 border-left-@GetPredictionSeverity(prediction.PredictedFailureProbability)">
                                <div class="card-body p-3">
                                    <h6 class="card-title">@prediction.DeviceId - @prediction.ComponentName</h6>
                                    <p class="card-text">
                                        <strong>Failure Probability:</strong> @($"{prediction.PredictedFailureProbability * 100:F1}%")<br>
                                        <strong>Predicted Date:</strong> @prediction.PredictedFailureDate.ToString("yyyy-MM-dd")<br>
                                        <strong>Confidence:</strong> @($"{prediction.ConfidenceScore * 100:F1}%")
                                    </p>
                                    <small class="text-muted">
                                        Actions: @string.Join(", ", prediction.RecommendedActions)
                                    </small>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <p class="text-muted">No predictions available</p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<PlcData> recentPlcData = new();
    private List<MachineState> machineStates = new();
    private List<MaintenancePrediction> maintenancePredictions = new();
    
    private int activeMachines = 0;
    private double overallEfficiency = 0;
    private int activeAlarms = 0;
    private int dataPointsToday = 0;

    protected override async Task OnInitializedAsync()
    {
        // Load initial data
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        try
        {
            // Load recent data for sample devices
            var deviceIds = new[] { "PLC001", "PLC002", "PLC003" };
            var endTime = DateTime.UtcNow;
            var startTime = endTime.AddHours(-1);

            foreach (var deviceId in deviceIds)
            {
                // Generate sample predictions
                var prediction = await AnalyticsService.PredictMaintenanceAsync(deviceId);
                maintenancePredictions.Add(prediction);
            }
            
            // Update summary statistics
            activeMachines = deviceIds.Length;
            overallEfficiency = 95.0; // Sample data
            dataPointsToday = 1250; // Sample data
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading dashboard data: {ex.Message}");
        }
    }

    private string GetStatusBadgeClass(DeviceStatus status)
    {
        return status switch
        {
            DeviceStatus.Online => "badge-success",
            DeviceStatus.Warning => "badge-warning",
            DeviceStatus.Error => "badge-danger",
            DeviceStatus.Offline => "badge-secondary",
            DeviceStatus.Maintenance => "badge-info",
            _ => "badge-secondary"
        };
    }

    private string GetStatusBadgeClass(MachineStatus status)
    {
        return status switch
        {
            MachineStatus.Running => "badge-success",
            MachineStatus.Idle => "badge-warning",
            MachineStatus.Error => "badge-danger",
            MachineStatus.Stopped => "badge-secondary",
            MachineStatus.Maintenance => "badge-info",
            MachineStatus.Setup => "badge-primary",
            _ => "badge-secondary"
        };
    }

    private string GetPredictionSeverity(double probability)
    {
        return probability switch
        {
            > 0.7 => "danger",
            > 0.4 => "warning",
            _ => "success"
        };
    }
}
